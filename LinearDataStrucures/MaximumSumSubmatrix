package advance.LinearDataStrucures;


import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;

public class MaximumSumSubmatrix {
    public static void main(String[] args) {


    Scanner scanner = new Scanner(System.in);

                        int[][] matrix = fillMatrix(scanner);
int bestSum=Integer.MIN_VALUE;
int rowIndex=0;
int couIndex=0;


for(int row =0; row<matrix.length-1; row++){
            for (int cou = 0; cou < matrix[row].length-1; cou++) {
int sum=matrix[row][cou] + matrix[row][cou+1]+
        matrix[row+1][cou] + matrix[row+1][cou+1];
if (sum>=bestSum)
{bestSum =sum;
    rowIndex=row;
    couIndex=cou;
}
            }
        }

        System.out.println(matrix[rowIndex][couIndex]+ " " + matrix[rowIndex][couIndex+1]);
        System.out.println(matrix[rowIndex+1][couIndex]+ " " + matrix[rowIndex+1][couIndex+1]);
        System.out.println(bestSum);

    }

    private static int[][] fillMatrix(Scanner scanner) {

        List<String> dimension = Arrays.stream(scanner.nextLine().split(", ")).collect(Collectors.toList());


        int rows= Integer.parseInt(dimension.get(0));
        int couls= Integer.parseInt(dimension.get(1));
        int[][] matrix = new int[rows][couls];

        for (int row = 0; row < matrix.length; row++) {
            String[] values = scanner.nextLine().split(", ");

            for (int col = 0; col < matrix[row].length; col++) {

                matrix[row][col] = Integer.parseInt(values[col]);
                /// sum+=matrix[row][col]

            }

        }
return matrix;
    }


}
